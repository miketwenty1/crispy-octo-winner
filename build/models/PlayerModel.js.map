{"version":3,"sources":["../../src/models/PlayerModel.js"],"names":["PlayerModel","playerId","spawnLocations","players","username","frame","attack","health","maxHealth","defense","bitcoin","id","flipX","playerAttacking","location","generateLocation","x","y","playerItems","maxNumberOfItems","Object","keys","length","console","log","item","damage","updateHealth","Math","floor","random","invalidLocation","some","key"],"mappings":";;;;;;;;;;;;;;;AAAA;IACqBA,W;AACnB,uBAAYC,QAAZ,EAAsBC,cAAtB,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyDC,KAAzD,EAAgE;AAAA;AAC9D,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,GAAd;AACA,SAAKC,SAAL,GAAiB,GAAjB;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,EAAL,GAAUV,QAAV;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKU,KAAL,GAAa,IAAb;AACA,SAAKC,eAAL,GAAuB,KAAvB,CAT8D,CAU9D;;AACA,QAAMC,QAAQ,GAAG,KAAKC,gBAAL,CAAsBZ,OAAtB,CAAjB,CAX8D,CAY9D;;AAZ8D,oDAa3CW,QAb2C;;AAa7D,SAAKE,CAbwD;AAarD,SAAKC,CAbgD;AAc9D,SAAKb,QAAL,GAAgBA,QAAhB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKa,WAAL,GAAmB,EAAnB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AAEA,SAAKH,CAAL,GAAS,GAAT;AACA,SAAKC,CAAL,GAAS,GAAT;AACD;;;;oCAEe;AACd,UAAIG,MAAM,CAACC,IAAP,CAAY,KAAKH,WAAjB,EAA8BI,MAA9B,GAAuC,KAAKH,gBAAhD,EAAkE;AAChEI,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,WAAjB;AACA,eAAO,KAAP;AACD;;AACDK,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,aAAO,IAAP;AACD;;;4BAEOC,I,EAAM;AACZ,WAAKP,WAAL,CAAiBO,IAAI,CAACd,EAAtB,IAA4Bc,IAA5B;AACD;;;+BAEUA,I,EAAM;AACf,aAAO,KAAKP,WAAL,CAAiBO,IAAI,CAACd,EAAtB,CAAP;AACD;;;mCAEcL,M,EAAQ;AACrB,UAAIoB,MAAM,GAAGpB,MAAM,GAAG,KAAKG,OAA3B;AACA,UAAIiB,MAAM,GAAG,CAAb,EAAgBA,MAAM,GAAG,CAAT;AAChB,WAAKC,YAAL,CAAkBD,MAAlB,EAHqB,CAIrB;AACA;AACD;;;kCAEahB,O,EAAS;AACrB,WAAKA,OAAL,IAAgBA,OAAhB;AACD;;;iCAEYgB,M,EAAQ;AACnB,WAAKnB,MAAL,IAAemB,MAAf;;AACA,UAAI,KAAKnB,MAAL,GAAc,KAAKC,SAAvB,EAAkC;AAChC,aAAKD,MAAL,GAAc,KAAKC,SAAnB;AACD;AACF;;;4BAEOL,O,EAAS;AACf,WAAKI,MAAL,GAAc,KAAKC,SAAnB;AACA,UAAMM,QAAQ,GAAG,KAAKC,gBAAL,CAAsBZ,OAAtB,CAAjB;;AAFe,uDAGIW,QAHJ;;AAGd,WAAKE,CAHS;AAGN,WAAKC,CAHC;AAIhB;;;qCAEgBd,O,EAAS;AACxB,UAAMW,QAAQ,GAAG,KAAKZ,cAAL,CAAoB0B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAK5B,cAAL,CAAoBoB,MAA/C,CAApB,CAAjB;AACA,UAAMS,eAAe,GAAGX,MAAM,CAACC,IAAP,CAAYlB,OAAZ,EAAqB6B,IAArB,CAA0B,UAACC,GAAD,EAAS;AACzD,YAAI9B,OAAO,CAAC8B,GAAD,CAAP,CAAajB,CAAb,KAAmBF,QAAQ,CAAC,CAAD,CAA3B,IAAkCX,OAAO,CAAC8B,GAAD,CAAP,CAAahB,CAAb,KAAmBH,QAAQ,CAAC,CAAD,CAAjE,EAAsE;AACpE,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALuB,CAAxB;;AAMA,UAAIiB,eAAJ,EAAqB;AACnB,eAAO,KAAKhB,gBAAL,CAAsBZ,OAAtB,CAAP;AACD;;AACD,aAAOW,QAAP;AACD","sourcesContent":["// container player information like health and balance\nexport default class PlayerModel {\n  constructor(playerId, spawnLocations, players, username, frame) {\n    this.attack = 10;\n    this.health = 100;\n    this.maxHealth = 100;\n    this.defense = 2;\n    this.bitcoin = 0;\n    this.id = playerId;\n    this.spawnLocations = spawnLocations;\n    this.flipX = true;\n    this.playerAttacking = false;\n    // this.currentDirection = ;\n    const location = this.generateLocation(players);\n    // short hand to set 2 values 1st and 2nd item of location array\n    [this.x, this.y] = location;\n    this.username = username;\n    this.frame = frame;\n    this.playerItems = {};\n    this.maxNumberOfItems = 3;\n\n    this.x = 300;\n    this.y = 300;\n  }\n\n  canPickupItem() {\n    if (Object.keys(this.playerItems).length > this.maxNumberOfItems) {\n      console.log('too many items');\n      console.log(this.playerItems);\n      return false;\n    }\n    console.log('good, pickup item items');\n    return true;\n  }\n\n  addItem(item) {\n    this.playerItems[item.id] = item;\n  }\n\n  removeItem(item) {\n    delete this.playerItems[item.id];\n  }\n\n  playerAttacked(attack) {\n    let damage = attack - this.defense;\n    if (damage < 0) damage = 0;\n    this.updateHealth(damage);\n    // console.log(attack);\n    // console.log(damage);\n  }\n\n  updateBitcoin(bitcoin) {\n    this.bitcoin += bitcoin;\n  }\n\n  updateHealth(damage) {\n    this.health -= damage;\n    if (this.health > this.maxHealth) {\n      this.health = this.maxHealth;\n    }\n  }\n\n  respawn(players) {\n    this.health = this.maxHealth;\n    const location = this.generateLocation(players);\n    [this.x, this.y] = location;\n  }\n\n  generateLocation(players) {\n    const location = this.spawnLocations[Math.floor(Math.random() * this.spawnLocations.length)];\n    const invalidLocation = Object.keys(players).some((key) => {\n      if (players[key].x === location[0] && players[key].y === location[1]) {\n        return true;\n      }\n      return false;\n    });\n    if (invalidLocation) {\n      return this.generateLocation(players);\n    }\n    return location;\n  }\n}\n"],"file":"PlayerModel.js"}